//🎯DAY 16 PROBLEM 2
//The idea is to apply binary search for two parts of the array seperately, after determining the pivot point.
//Just remember the case when the pivot point is the last element i.e. eg. 1 2 3 4 5 so we have to appply binary search on whole array seperately.. as arr[i]>arr[i+1] will
never be true.

class Solution {
public:
    int binarySearch(int l, int r,vector< int> arr,int target)
    {
        if(l<=r)
        {
        int mid= l+ (r-l)/2;
        if(arr[mid]==target)
            return mid;
        if(arr[mid]>target)
            return binarySearch(l,mid-1,arr,target);
        if(arr[mid]<target)
            return binarySearch(mid+1,r,arr,target);
        }
        //l becomes equal to r only when the target is not found  
        return -1;
    }
    int search(vector<int>& nums, int target) {
        if(nums.empty())return -1;
        if(nums.size()==1) return (nums[0]==target)?0:-1;
        int count=0;
        for(int i=0;i<nums.size();i++)
        {
            if(i<nums.size()-1&&nums[i]>nums[i+1])
            {
                return max(binarySearch(0,i,nums,target),binarySearch(i+1,nums.size()-1,nums,target));
          
                }
        }
        
        return max(binarySearch(0,nums.size()-1,nums,target),-1);
    }
};
