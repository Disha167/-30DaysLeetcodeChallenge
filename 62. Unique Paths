//ðŸŽ¯DAY 31 PROBLEM 1
//This is a classic dp grid problem where the user is allowed to go to right or bottom and we have to find the number of ways to reach the end of the grid . It can be done 
//recursively easily by passing n,m as parameters and reducing to n-1,m or n,m-1 (to move right or bottom). No of ways to reach the end from n,m is addition of total ways to reach
//n-1,m and n,m-1. It will give exponential runtime, to further optimise it we use dp . DP has n*m states in total as i and j can go maximum upto n and m and the dp state depends on
//i and j so the time complexity becomes n*m. Further to optimise it , we can use combination to calculate the unique paths which will be equal to selecting m-1 rights from total
//of n+m-2 rights and downs i.e. n+m-2 
//                                     C
//                                        m-1
//and the combination takes O(m-1) time in computation.
class Solution {
public:
    int uniquePaths(int m, int n) {
        int dp[m+1][n+1];
        for(int i=m-1;i>=0;i--)
        {
            for(int j=n-1;j>=0;j--)
            {
                if(i==m-1||j==n-1)//if we reach the last row or the last coloumn, there is only 1 way to go to the end from there i.e walking on the straight line without any turns
                    dp[i][j]=1;
                else
                    dp[i][j]=dp[i+1][j]+dp[i][j+1];
            }
        }
        return dp[0][0];
    }
};
