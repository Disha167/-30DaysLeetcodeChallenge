//ðŸŽ¯DAY 17 PROBLEM 1
//The three checks are done using for loops, i.e row check, col check and square check .
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int count[11]={0};
        for(int i=0;i<board.size();i++)
        {
        //after every coloumn, we set the count array 0, as for every coloumn we have to check for repetition of 1-9
            memset(count,0,sizeof(count));
            for(int j=0;j<board[i].size();j++)
            {
                char num=board[i][j];
                if(num!='.')
                {
          //ascii code of 0 is 48 so to avoid out of bound condition i.e. to make every index under 10 , we subtract 48 from board[i][j]
                count[board[i][j]-48]++;
                //if frequency of any character is >1, then return false i.e. sudoku is not valid
                if(count[board[i][j]-48]>1)
                {
                    return false;
                }
                }
            }
        }
       memset(count,0,sizeof(count));
        for(int i=0;i<board.size();i++)
        {
             memset(count,0,sizeof(count));
            for(int j=0;j<board[i].size();j++)
            {
              
                if(board[j][i]!='.')
                {
                count[board[j][i]-48]++;
                if(count[board[j][i]-48]>1)
                {
                   
                    return false;
                }
                }
            }
        }
        memset(count,0,sizeof(count));
        for(int row_end=2;row_end<9;row_end+=3)
        {
            for(int col_end=2;col_end<9;col_end+=3)
            {
               memset(count,0,sizeof(count));
                for(int i=row_end-2;i<=row_end;i++)
                {
                    for(int j=col_end-2;j<=col_end;j++)
                    {
                        if(board[i][j]!='.')
                        {
                        count[board[i][j]-48]++;
                if(count[board[i][j]-48]>1)
                    return false;
                        }
                    }
                }
            }
        }
        return true;
    }
};
